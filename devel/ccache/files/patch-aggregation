--- cmake/config.h.in
+++ cmake/config.h.in
@@ -27,11 +27,13 @@
 // features on Mac OS X, so we need _DARWIN_C_SOURCE to re-enable them.
 #cmakedefine _DARWIN_C_SOURCE
 
-// Define to activate features from IEEE Stds 1003.1-2001.
+// Define to activate features from IEEE Stds 1003.1-2008.
 #define _POSIX_C_SOURCE 200809L
 
 #if defined(__SunOS_5_8) || defined(__SunOS_5_9) || defined(__SunOS_5_10)
 #  define _XOPEN_SOURCE 500
+#elif defined(__FreeBSD__)
+#  define _XOPEN_SOURCE 700
 #elif !defined(__SunOS_5_11) && !defined(__APPLE__)
 #  define _XOPEN_SOURCE
 #endif
diff --git src/InodeCache.cpp b/src/InodeCache.cpp
index a0e97a1b..a86d6078 100644
--- src/InodeCache.cpp
+++ src/InodeCache.cpp
@@ -202,6 +202,12 @@ InodeCache::hash_inode(const std::string& path,
   return true;
 }
 
+#ifdef __clang__
+#  pragma clang diagnostic push
+#  if __has_warning("-Wthread-safety-analysis")
+#    pragma clang diagnostic ignored "-Wthread-safety-analysis"
+#  endif
+#endif
 InodeCache::Bucket*
 InodeCache::acquire_bucket(uint32_t index)
 {
@@ -234,6 +240,9 @@ InodeCache::acquire_bucket(uint32_t index)
 #endif
   return bucket;
 }
+#ifdef __clang__
+#  pragma clang diagnostic pop
+#endif
 
 InodeCache::Bucket*
 InodeCache::acquire_bucket(const Digest& key_digest)
@@ -243,11 +252,20 @@ InodeCache::acquire_bucket(const Digest& key_digest)
   return acquire_bucket(hash % k_num_buckets);
 }
 
+#ifdef __clang__
+#  pragma clang diagnostic push
+#  if __has_warning("-Wthread-safety-analysis")
+#    pragma clang diagnostic ignored "-Wthread-safety-analysis"
+#  endif
+#endif
 void
 InodeCache::release_bucket(Bucket* bucket)
 {
   pthread_mutex_unlock(&bucket->mt);
 }
+#ifdef __clang__
+#  pragma clang diagnostic pop
+#endif
 
 bool
 InodeCache::create_new_file(const std::string& filename)
